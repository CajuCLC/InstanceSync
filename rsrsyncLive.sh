#!/bin/bash
# - title        : Migrating Servers Using RSYNC
# - description  : This Script Will Migrate Data From one Instance to another
# - License      : GPLv3
# - author       : Kevin Carter
# - date         : 2012-05-14
# - version      : 1.1
# - usage        : bash rsrsyncLive.sh
# - OS Supported : Ubuntu, Debian, SUSE, Gentoo, RHEL, CentOS
#### ========================================================================== ####

# The Date as generated by the Source System
DATE=`date +%y%m%d%H`

# The Temp Working Directory
TEMPDIR="/tmp"

# Name of the Temp SSH Key we will be using.
SSHKEYTEMP="$TEMPDIR/tempssh.$DATE"

# ROOT SSH Key File
SSHAUTHKEYFILE="/root/.ssh/authorized_keys"

# General Exclude List; The exclude list is space Seperated
EXCLUDELIST='/boot /dev/ /etc/conf.d/net /etc/fstab /etc/hostname /etc/HOSTNAME /etc/hosts /etc/issue /etc/init.d/nova-agent* /etc/mdadm* /etc/mtab /etc/network/* /etc/networks* /etc/network.d/* /etc/rc.conf /etc/resolv.conf /etc/selinux/config /etc/sysconfig/network/* /etc/sysconfig/network-scripts/* /etc/udev/rules.d/* /lock /net /sys /tmp /usr/sbin/nova-agent* /usr/share/nova-agent* /var/cache/yum/*'

# Amazon Exclude List; The exclude list is space Seperated
AMAZONEXCLUDELIST='/etc/sysctl.conf /etc/yum.repos.d/amzn-*'

# Extra Exclude File 
EXCLUDEME="/tmp/excludeme.file"

# Root user check for install 
CHECKFORROOT(){
USERCHECK=$( whoami  )
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as ROOT"
        echo "You have attempted to run this as $USERCHECK"
                echo "use sudo $0 or change to root."
   exit 1
fi
}

if [ "$1" == "opinion" ];then 
INFLAMMATORY="1" 
fi

CHECKFORROOT

# Trap a CTRL-C Command 
CONTROL_C(){
echo ''
echo -e "\033[1;31mAAHAHAAHH! FIRE! CRASH AND BURN! \033[0m"
echo -e "\033[1;36mYou Pressed [ CTRL C ] \033[0m"
QUIT
if [ "$INFLAMMATORY" == 1 ];then echo -e "You obviously screwed something up,\nor you got cold feet. either way..."; fi
echo "I quit, and deleted all of the temp files I made."

	exit 1
}

QUIT(){
echo 'Removing Temp Files'
if [ -f $EXCLUDEME ];then 
	rm $EXCLUDEME 
fi
if [ -f /tmp/intsalldeps.sh ];then
	rm /tmp/intsalldeps.sh
fi
if [ -f $SSHKEYTEMP ];then
	rm $SSHKEYTEMP*
fi
if [ -f /tmp/known_hosts ];then
	rm /tmp/known_hosts
fi
if [ -f /tmp/postopfix.sh ];then
	rm /tmp/postopfix.sh
fi

}

##  trap keyboard interrupt (control-c)  ##
trap CONTROL_C SIGINT

clear
if [ "$INFLAMMATORY" == 1 ];then echo -e "Inflammatory mode has been enabled... The application will now be really opinionated...\n\033[1;33mYOU\033[0m have been warned...\n"; fi
echo -e "\nThis Utility Moves a \033[1;36mLIVE\033[0m System to an other System."
echo -e "This application will work on \033[1;36mAll\033[0m Linux systems using RSYNC."
echo ''
echo -e "Before performing this action you \033[1;35mSHOULD\033[0m be in a screen session."
echo ''
sleep 3
echo -e "This Utility does an \033[1;32mRSYNC\033[0m copy of instances over the network."
echo "As such, I recommend that you perform this Migration Action"
echo "on SNET (Internal IP), however any Network will work."
echo "Here is why I make this recommendation...."
echo -e "Service Net = \033[1;32mFREE\033[0m Bandwidth."
echo -e "Public Net  = \033[1;35mNOT FREE\033[0m Bandwidth" 

# Building Exclude File - DONT TOUCH UNLESS YOU KNOW WHAT YOU ARE DOING
EXCLUDEVAR=$( echo $EXCLUDELIST | sed 's/\ /\\n/g' )
echo -e $EXCLUDEVAR >> $EXCLUDEME

# Check to see if this is an Amazon Server Migrating to the Rackspace Cloud
ISTHISAMAZON(){
KERNELTYPE=$( uname -r )
AMZNKERNEL=$( echo $KERNELTYPE | grep amzn )

# Check for the Amazon Python Modules

CHECKAWSBOTO=$(python -c "try:
    import boto.roboto.awsqueryservice
except ImportError, e:
    print 'FAIL'
")

CHECKBOTO=$(python -c "try:
    import boto
except ImportError, e:
    print 'FAIL'
")

if [ "$AMZNKERNEL" ] || [ ! "$CHECKAWSBOTO" == "FAIL" ] || [ ! "$CHECKBOTO" == "FAIL" ];then
echo ''
echo "It seems you are currently on an Amazon Server using"
echo -e "The \033[1;33mAmazon AMI\033[0m Linux Distribution."
if [ "$INFLAMMATORY" == 1 ];then echo -e "Which must really suck..."; fi
echo -e "Is this an instance that is coming from \033[1;33mAmazon EC2\033[0m?"
read -p "Please Answer yes or no : " MIGRATEEC2
case $MIGRATEEC2 in
yes)
echo ''
echo -e "Due to \033[1;33mAmazon EC2\033[0m SSH Security already in place."
echo "Access to your Instance POST migration will use your current Amazon Method."
echo -e "Which may involve PEM files, keys or other assorted means.\n"
if [ "$INFLAMMATORY" == 1 ];then echo -e "Bottom Line, If it worked before it should work again...\n"; fi

# Adding additional Excludes, for Amazon
echo -e "We are adding additional Excludes to accomodate \033[1;33mAmazon EC2\033[0m Instances."
if [ "$INFLAMMATORY" == 1 ];then echo -e "Which by the way are junk...\n"; fi

AMAZONEXCLUDEVAR=$( echo $AMAZONEXCLUDELIST | sed 's/\ /\\n/g' )
echo -e $AMAZONEXCLUDEVAR >> $EXCLUDEME
find / -name '*cloudinit*' >> $EXCLUDEME
find / -name '*cloud-init*' >> $EXCLUDEME
find / -name '*amazon*' >> $EXCLUDEME
sleep 5
echo ''

if [ "$AMZNKERNEL" ];then
echo -e "Based on the \033[1;33m$KERNELTYPE\033[0m Kernel."
echo -e "You seem to be using an Instance of \033[1;33mAmazon AMI Linux\033[0m."
echo "If you want to continue you can, but there may be complications."
echo "Your best bet for guaranteed success is to manually migrate your data."
if [ "$INFLAMMATORY" == 1 ];then echo -e "The reason for this is that you have chosen a terrible distribution of Linux\nwhich really is nothing more than a clone of another terrible Linux Distribution\n... RHEL...\nbut rest assured I did test this action thoroughly...\neven if I did hate every mnute of it.\n"; fi
echo ''
echo "I have Great success in migrating"
echo -e "\033[1;33mAmazon AMI Linux\033[0m to \033[1;31mCentOS/RHEL\033[0m"
echo -e "If your Target Server is a \033[1;31mCentOS/RHEL\033[0m you should be fine."
echo ''
echo "While I have had a lot of Success moving these types of Instances around," 
echo -e "You should also be aware that \033[1;33mAmazon AMI Linux\033[0m is proprietary " 
echo "and it could have issues moving to a more Open Source Platform."
echo ''

read -p "Press [Enter] to Continue or [ CTRL -C ] to quit."

fi

;;

no)
echo -e "Sounds Good, I did not want to deal with \033[1;33mAmazon\033[0m anyway."
;;

*)
echo "Please Enter \"yes\" or \"no\" in lower case letters."
unset MIGRATEEC2
ISTHISAMAZON 
;;
esac

fi
}

# Run the Amazon Check
ISTHISAMAZON

# Run the Virtual Box Check
# ISTHISVIRTUALBOX(){
# Place Holder
# }
# ISTHISVIRTUALBOX

echo ''
if [ -z "$TIP" ];then
GETTIP(){
	echo "If you are ready to proceed please enter your Target IP address"
		read -p "IP address : " TIP
			if [ -z "$TIP" ];then
				echo "No IP was provided, please try again"
				unset TIP
				GETTIP
			fi
}
GETTIP
fi

echo ''
echo "This script was built for Migrating Rackspace Cloud"
echo "Server from one instance to another. However, you can"
echo "migrate what ever you want."
echo ''
echo "If this is a Rackspace Cloud Server migrating to another Rackspace Cloud Server"
echo "simply press [ Enter ] to continue. This will assume both Systems are Live."
echo ''
echo "If you want to specify a Source Mount Point, This is Normally \"/\"."
echo -e "But could be anything. to use this \033[1;36mYou must use the full path\033[0m."
echo ''
read -p "[ Enter ] to Continue or Specify a Source Directory Now : " "DRIVE1"

if [ -z "$DRIVE1" ];then 
	DRIVE1="/"
	DRIVE2="/dev/xvdb1"

else 	
GETDRIVE1(){
if [ ! -d "$DRIVE1" ];then
	echo "What you specified does not exist."
	read -p "Specify Source Mount Point : " "DRIVE1"
	GETDRIVE1
fi
		if [ -z "$DRIVE1" ];then 
			echo "You did not specify a Source Drive, Please dry again."
			unset DRIVE1
			GETDRIVE1
		fi

}
GETDRIVE1

GETDRIVE2(){
echo ''
echo -e "Here you Must Specify the \033[1;33mTarget\033[0m.  This is \033[1;33mA MOUNT\033[0m Point."
echo "Under Normall Rackspace Cercumstances this drive would be \"/\"."
echo ''
echo "Remember, there is no way to check that the directory exists"
echo -e "This means we are relying on \033[1;33mYOU\033[0m to type correctly."
	read -p "Specify Destination Drive : " "DRIVE2"
		if [ -z "$DRIVE2" ];then 
			echo ''
			echo -e "\033[1;31mYou did not specify a Destination Drive, Please dry again.\033[0m"
			unset DRIVE2
			GETDRIVE2
		fi		
}
GETDRIVE2
fi

if [ -f /etc/issue ];then
	RHEL=$(cat /etc/issue | grep -i '\(centos\)\|\(red\)\|\(fedora\)\|\(amazon\)')
		DEBIAN=$(cat /etc/issue | grep -i '\(debian\)\|\(ubuntu\)')
			SUSE=$(cat /etc/issue | grep -i '\(suse\)')
				ARCH=$(cat /etc/issue | grep -i '\(arch\)')
	elif [ -f /etc/gentoo-release ];then
				GENTOO=$(cat /etc/gentoo-release | grep -i '\(gentoo\)')
	else 
		echo ''
		echo "WARNING!! I could not determine your OS Type."
		echo "This Application has only been tested on : "
		echo -e "\033[1;31mDebian, Ubuntu, Fedora, CentOS, RHEL, SUSE\033[0m"
		echo ''
fi



if [ -n "$RHEL" ];then
echo -e "\033[1;31mRHEL Based System Detected\033[0m"
echo "Installing rsync Package."
yum -y install rsync
echo "yum -y install rsync" > /tmp/intsalldeps.sh
if [ "$INFLAMMATORY" == 1 ];then echo -e "I hope you realize that you have made a BAD choice with the RHEL variety,\nRHEL is terrible, you would be better off doing a manual migration.\nBut I am going ahead with the deployment so dont worry.\nLinux. due to your poor choice of Linux distributions.\n"; fi


elif [ -n "$DEBIAN" ];then 
echo -e "\033[1;31mDebian Based System Detected\033[0m"
echo "Performing Package Update"
apt-get update > /dev/null 2>&1
echo "Installing rsync Package."
apt-get -y install rsync > /dev/null 2>&1
echo "apt-get update > /dev/null 2>&1
apt-get -y install rsync > /dev/null 2>&1" > /tmp/intsalldeps.sh
if [ "$INFLAMMATORY" == 1 ];then echo -e "Great choice by choosing a Debian Based Distro.\nThe Debian way is by far the best way.\n"; sleep 2; fi


elif [ -n "$SUSE" ];then 
echo -e "\033[1;31mSUSE Based System Detected\033[0m"
zypper in rsync
echo "zypper -n in rsync" > /tmp/intsalldeps.sh
if [ "$INFLAMMATORY" == 1 ];then echo -e "I like SUSE Linux, and you should too.\nIts not as good as Debian But WAY better than ANYTHING RHEL.\n"; sleep 2; fi

elif [ -n "$GENTOO" ];then
echo -e "\033[1;31mGentoo Based System Detected\033[0m"
if [ "$INFLAMMATORY" == 1 ];then echo -e "Gentoo is nice if you are into that sort of thing. But I have to ask,\nWHY THE HELL are you using this script to move a Gentoo image?\nAs a Gentoo User, you should have more pride and do it all by hand...\n"; sleep 2; fi


elif [ -n "$ARCH" ];then
echo -e "\033[1;31mArch Based System Detected\033[0m"
if [ "$INFLAMMATORY" == 1 ];then echo -e "I have never meet anyone who ram a production ready Arch Linux Anything...\nAnd you think your different...\n"; sleep 2; fi

				else
				echo "Because I could not determine the OS type you will have to"
				echo -e "\033[1;31mLogin to the target OS while in rescue mode, and fix the IP address or preserve your networking .\033[0m"
				if [ "$INFLAMMATORY" == 1 ];then echo -e "Basically I have no IDEA what to do with you....\n"; sleep 2; fi
fi


if [ ! $( which rsync ) ];then
    echo -e "The \033[1;36m\"rsync\"\033[0m command was not found.\nThe automatic Installation of rsync failed so that means you NEED to install it."
    exit 1
else
RSYNCVERSION=$(rsync --version | head -n 1 | awk '/version/ {print $3}')
RSYNCVERSIONCOMP=$((echo yes | awk \"{if ($RSYNCVERSION >= 3.0.0) print $1}\")
fi

echo -e "\033[1;36mBuilding Key Based Access for the target host\033[0m"
ssh-keygen -N '' -f $SSHKEYTEMP

# Making backup of known_host
cp /root/.ssh/known_hosts /root/.ssh/known_hosts.$DATE.bak

echo -e "Please Enter the Password of the \033[1;33mTARGET\033[0m Server."
ssh-copy-id -i $SSHKEYTEMP root@$TIP


if [ -f /tmp/intsalldeps.sh ];then
echo -e "Passing the RSYNC Dependency to the \033[1;33mTARGET\033[0m Server."
scp -i $SSHKEYTEMP /tmp/intsalldeps.sh root@$TIP:/root/
fi

# Post Migration script for Amazon AMI Linux
if [ "$AMZNKERNEL" ];then
echo "# Post Migration Script
echo \"\$( cat /etc/issue | head -1 | awk '{print \$3}' | awk -F '.' '{print \$1}' )\" > /etc/yum/vars/releasever;
for i in \$( rpm -qa | grep -i -e epel-release -e system-release -e sysvinit -e perl-io -e perl-file -e perl-http -e perl-lwp -e perl-net -e aws -e perl-libwww ); do rpm -e --nodeps \$i; done;" > /tmp/postopfix.sh
scp -i $SSHKEYTEMP /tmp/postopfix.sh root@$TIP:/root/
fi

# Removing known_host entry made by script
cp /root/.ssh/known_hosts /tmp/known_hosts
sed '$ d' /tmp/known_hosts > /root/.ssh/known_hosts
rm -f /tmp/known_hosts

echo -e "Running Dependency Script on the \033[1;33mTARGET\033[0m Server."
ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$TIP "bash intsalldeps.sh" > /dev/null 2>&1

echo -e "\033[1;36mNow performing the Copy\033[0m"

if [ "$RSYNCVERSIONCOMP" == "yes" ];then 
RSYNCFLAGS='aHEAXSzx'
    echo "Using RSYNC <= 3.0.0 Flags."
else 
RSYNCFLAGS='aHSzx'
    echo "Using RSYNC >= 2.0.0 but < 3.0.0 Flags."
fi

if [ $( which time ) ];then
time rsync -e "ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" -$RSYNCFLAGS --progress --exclude-from="$EXCLUDEME" --exclude "$SSHAUTHKEYFILE" / root@$TIP:/;

	else
	rsync -e "ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" -$RSYNCFLAGS --progress --exclude-from="$EXCLUDEME" --exclude "$SSHAUTHKEYFILE" / root@$TIP:/;
aSi


sleep 5

echo -e "\033[1;36mNow performing Final Sweep\033[0m"
rsync -e "ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" -c$RSYNCFLAGS --progress --exclude-from="$EXCLUDEME" --exclude "$SSHAUTHKEYFILE" / root@$TIP:/;


if [ "$AMZNKERNEL" ];then
echo -e "\033[1;36mNow performing Amazon Specific Processes\033[0m"
HOSTTARGET=$( ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$TIP "echo \$( head -1 /etc/issue )"; )
ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$TIP "bash postopfix.sh";
ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$TIP "yum -y install initscripts"

if [ `echo $HOSTTARGET | grep -i centos` ];then
TARGETOSTYPE="centos"
ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$TIP "yum -y install $TARGETOSTYPE-release"
	elif [ `echo $HOSTTARGET | grep -i redhat` ];then
	TARGETOSTYPE="redhat"
	ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$TIP "yum -y install $TARGETOSTYPE-release"
		else
		TARGETOSTYPE="YOUR-TARGET-DISTRO"
		echo "The Target Distro did not match what I was looking for"
		echo "You need to login to the Target Instance and run :"
		echo "yum install $TARGETOSTYPE-release"
fi


fi 


echo -e "\033[1;36mThe target Instance is being rebooted\033[0m"
ssh -i $SSHKEYTEMP -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$TIP "shutdown -r now";


echo ''
echo "If you were copying something that was not a Rackspace Cloud Server,"
echo "You may need to ensure that your setting are correct, and the target is healthy"

if [ "$AMZNKERNEL" ];then
echo -e "Being that this instance was migrating from an \033[1;33mAmazon EC2\033[0m" 
echo "You should login to the Target Server and make any configuration changes that are needed."
echo "I have tried to be thorough but some times things happen which can cause incompatibilities."
if [ "$INFLAMMATORY" == 1 ];then echo -e "In short if its broke, don't cry...\n"; fi
fi

echo 'Other wise you are good to go, and the target server should have been rebooted.'
echo "If all is well, you should now be able to enjoy your newly cloned Virtual Instance."
QUIT
echo "I'm done..."
if [ "$INFLAMMATORY" == 1 ];then echo -e "I hope you enjoyed all of my hard work...\n"; fi
echo "but stop by http://RackerUA.com for more random and sometimes helpful tidbits..."
if [ "$INFLAMMATORY" == 1 ];then echo -e "And if you feel so Inclined you can buy me a \033[1;33mBeer\033[0m,\nI perfer cold \033[1;33mBeer\033[0m But I will normally drink anything.  :)"; fi
exit 0
